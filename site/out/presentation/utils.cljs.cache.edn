{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name presentation.utils, :imports nil, :requires {cljs.js cljs.js, cljs.tools.reader cljs.tools.reader}, :uses {eval cljs.js, empty-state cljs.js, read-string cljs.tools.reader, js-eval cljs.js}, :defs {eval-str {:protocol-inline nil, :meta {:file "/Users/ben/projects/presentation2/src/presentation/utils.cljs", :line 7, :column 7, :end-line 7, :end-column 15, :arglists (quote ([s]))}, :name presentation.utils/eval-str, :variadic false, :file "/Users/ben/projects/presentation2/src/presentation/utils.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, code-block {:protocol-inline nil, :meta {:file "/Users/ben/projects/presentation2/src/presentation/utils.cljs", :line 19, :column 7, :end-line 19, :end-column 17, :arglists (quote ([state]))}, :name presentation.utils/code-block, :variadic false, :file "/Users/ben/projects/presentation2/src/presentation/utils.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}}, :require-macros {cljs.js cljs.js}, :cljs.analyzer/constants {:seen #{:hr :color :else :font-size :value :style :rows :div :expr :id :red :source-map :context :error :input :textarea.form-control :on-change :h3 :p :eval}, :order [:error :else :eval :source-map :context :expr :input :div :textarea.form-control :value :rows :id :on-change :h3 :hr :style :font-size :p :color :red]}, :doc nil}